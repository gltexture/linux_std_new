name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_LOGIN }}/myapp
  IMAGE_TEST: ${{ secrets.DOCKERHUB_LOGIN }}/myapp:test

jobs:
  build:
    runs-on: [ self-hosted, linux, x64 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: podman login docker.io -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push images
        working-directory: ./docker
        run: |
          podman build --target builder -t docker.io/${{ env.IMAGE_TEST }} .
          podman push docker.io/${{ env.IMAGE_TEST }}
          podman build -t docker.io/${{ env.IMAGE_NAME }} .
          podman push docker.io/${{ env.IMAGE_NAME }}

  test:
    runs-on: [ self-hosted, linux, x64 ]
    needs: build

    steps:
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_ACCESS }}" | podman login docker.io -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin

      - name: Pull and test image
        run: |
          podman pull docker.io/${{ env.IMAGE_TEST }}
          podman run --rm --net=host docker.io/${{ env.IMAGE_TEST }} sh -c "pip install pytest && pytest"

  deploy:
    runs-on: [ self-hosted, linux, x64 ]
    needs: test

    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | podman login docker.io -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin
            podman pull docker.io/${{ env.IMAGE_NAME }}
            podman stop app01 || true
            podman rm -f app01 || true
            podman run -d \
              --net=host \
              --replace \
              --name app01 \
              -p 8086:8086 \
              docker.io/${{ env.IMAGE_NAME }}
