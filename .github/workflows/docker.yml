name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_LOGIN }}/myapp
  IMAGE_TEST: ${{ secrets.DOCKERHUB_LOGIN }}/myapp:test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_LOGIN }} -p ${{ secrets.DOCKERHUB_ACCESS }}

      - name: Build and push images
        working-directory: ./docker
        run: |
          docker build --target builder -t ${{ env.IMAGE_TEST }} .
          docker push ${{ env.IMAGE_TEST }}
          docker build -t ${{ env.IMAGE_NAME }} .
          docker push ${{ env.IMAGE_NAME }}

  test:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: s177250/myapp:test
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
  
      - name: Run tests
        env:
          DATABASE_URL: postgresql://kubsu:kubsu@postgres:5432/kubsu
        run: |
          cd /app
          pytest -v ./tests/

  deploy:
    runs-on: self-hosted
    needs: test
    steps:
      - name: SSH, deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            podman login -u '${{ secrets.DOCKERHUB_LOGIN }}' -p '${{ secrets.DOCKERHUB_ACCESS }}'
            podman pull '${{ env.IMAGE_NAME }}'
            podman stop app01 || true
            podman rm -f app01 || true
            podman run -d --net=host --replace --name app01 -p 8086:8086 '${{ env.IMAGE_NAME }}'
